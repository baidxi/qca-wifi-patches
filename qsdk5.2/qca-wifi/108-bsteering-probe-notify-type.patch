--- a/include/ieee80211_band_steering_api.h
+++ b/include/ieee80211_band_steering_api.h
@@ -27,7 +27,8 @@ struct bs_probe_req_ind {
     /*  The RSSI of the received probe request.*/
     u_int8_t rssi;
     /* Whether the probe response was blocked or not */
-    u_int8_t blocked;
+    u_int8_t blocked:1,
+             ssid_null:1;
 };
 
 typedef enum {
--- a/umac/band_steering/band_steering.c
+++ b/umac/band_steering/band_steering.c
@@ -1624,7 +1624,8 @@ ieee80211_bsteering_record_act_change(st
 void ieee80211_bsteering_send_probereq_event(struct ieee80211vap *vap,
                                              const u_int8_t *mac_addr,
                                              u_int8_t rssi,
-                                             bool blocked)
+                                             bool blocked,
+                                             bool ssid_null)
 {
     struct bs_probe_req_ind probe;
 
@@ -1636,6 +1637,7 @@ void ieee80211_bsteering_send_probereq_e
     OS_MEMCPY(probe.sender_addr, mac_addr, IEEE80211_ADDR_LEN);
     probe.rssi = rssi;
     probe.blocked = blocked;
+    probe.ssid_null = ssid_null;
     IEEE80211_DELIVER_BSTEERING_EVENT(vap, ATH_EVENT_BSTEERING_PROBE_REQ,
                                       sizeof(probe),
                                       (const char *) &probe);
--- a/umac/include/ieee80211_band_steering.h
+++ b/umac/include/ieee80211_band_steering.h
@@ -115,7 +115,8 @@ void ieee80211_bsteering_send_disconnect
 void ieee80211_bsteering_send_probereq_event(struct ieee80211vap *vap,
                                              const u_int8_t *mac_addr,
                                              u_int8_t rssi,
-                                             bool blocked);
+                                             bool blocked,
+                                             bool ssid_null);
 
 /**
  * @brief Query the band steering module for whether it is withholding
--- a/umac/mlme/ieee80211_mgmt_bss.c
+++ b/umac/mlme/ieee80211_mgmt_bss.c
@@ -404,6 +404,7 @@ ieee80211_recv_probereq(struct ieee80211
     u_int8_t *qcn = NULL;
 #if ATH_BAND_STEERING
     bool blocked;
+    bool ssid_null;
 #endif
 
     /*
@@ -677,9 +678,11 @@ ieee80211_recv_probereq(struct ieee80211
         goto exit;
     }
 
+    ssid_null = (ssid[1] == 0) ? true : false;
     blocked = ieee80211_bsteering_is_probe_resp_wh(vap, wh->i_addr2, rs->rs_rssi);
 
-    ieee80211_bsteering_send_probereq_event(vap, wh->i_addr2, rs->rs_rssi, blocked);
+    ieee80211_bsteering_send_probereq_event(vap, wh->i_addr2,
+                                            rs->rs_rssi, blocked, ssid_null);
 
     /* If band steering is withholding probes (due to steering being in
      * progress), return here so that the response is not sent.
