--- a/include/ieee80211_band_steering_api.h
+++ b/include/ieee80211_band_steering_api.h
@@ -26,6 +26,8 @@ struct bs_probe_req_ind {
     u_int8_t sender_addr[IEEE80211_ADDR_LEN];
     /*  The RSSI of the received probe request.*/
     u_int8_t rssi;
+    /* Whether the probe response was blocked or not */
+    u_int8_t blocked;
 };
 
 /**
--- a/umac/band_steering/band_steering.c
+++ b/umac/band_steering/band_steering.c
@@ -1428,7 +1428,8 @@ ieee80211_bsteering_record_act_change(st
 
 void ieee80211_bsteering_send_probereq_event(struct ieee80211vap *vap,
                                              const u_int8_t *mac_addr,
-                                             u_int8_t rssi)
+                                             u_int8_t rssi,
+                                             bool blocked)
 {
     struct bs_probe_req_ind probe;
 
@@ -1439,6 +1440,7 @@ void ieee80211_bsteering_send_probereq_e
 
     OS_MEMCPY(probe.sender_addr, mac_addr, IEEE80211_ADDR_LEN);
     probe.rssi = rssi;
+    probe.blocked = blocked;
     IEEE80211_DELIVER_BSTEERING_EVENT(vap, ATH_EVENT_BSTEERING_PROBE_REQ,
                                       sizeof(probe),
                                       (const char *) &probe);
--- a/umac/include/ieee80211_band_steering.h
+++ b/umac/include/ieee80211_band_steering.h
@@ -100,8 +100,10 @@ int wlan_bsteering_get_dbg_params(const
  *                       request
  * @param [in] rssi  the RSSI of the received probe request
  */
-void ieee80211_bsteering_send_probereq_event(
-                                             struct ieee80211vap *vap, const u_int8_t *mac_addr, u_int8_t rssi);
+void ieee80211_bsteering_send_probereq_event(struct ieee80211vap *vap,
+                                             const u_int8_t *mac_addr,
+                                             u_int8_t rssi,
+                                             bool blocked);
 
 /**
  * @brief Query the band steering module for whether it is withholding
--- a/umac/mlme/ieee80211_mgmt_bss.c
+++ b/umac/mlme/ieee80211_mgmt_bss.c
@@ -402,6 +402,9 @@ ieee80211_recv_probereq(struct ieee80211
     u_int8_t dedicated_oui_present = 0;
 #if QCN_IE
     u_int8_t *qcn = NULL;
+#if ATH_BAND_STEERING
+    bool blocked;
+#endif
 
     /*
      * Max-ChannelTime parameter represented in units of TUs
@@ -474,12 +477,14 @@ ieee80211_recv_probereq(struct ieee80211
         found_null_bssid = 1;
     }
 #if ATH_BAND_STEERING
-    ieee80211_bsteering_send_probereq_event(vap, wh->i_addr2, rs->rs_rssi);
+    blocked = ieee80211_bsteering_is_probe_resp_wh(vap, wh->i_addr2);
+
+    ieee80211_bsteering_send_probereq_event(vap, wh->i_addr2, rs->rs_rssi, blocked);
 
     /* If band steering is withholding probes (due to steering being in
      * progress), return here so that the response is not sent.
      */
-    if (ieee80211_bsteering_is_probe_resp_wh(vap, wh->i_addr2)) {
+    if (blocked) {
         return 0;
     }
 
