Enhance band steering's auth failure event to include whether the
auth request was blocked by band steering, and whether it was 
rejected or ignored.
--- a/include/ieee80211_band_steering_api.h
+++ b/include/ieee80211_band_steering_api.h
@@ -59,6 +59,9 @@ struct bs_auth_reject_ind {
     /* The RSSI of the received authentication message (the one that
        triggered the rejection).*/
     u_int8_t rssi;
+    u_int32_t reason;
+    u_int8_t bs_blocked:1,
+             bs_rejected:1;
 };
 
 /**
--- a/umac/band_steering/band_steering.c
+++ b/umac/band_steering/band_steering.c
@@ -1772,16 +1772,21 @@ void ieee80211_bsteering_send_probereq_e
  * @brief Generate an event indicating that an authentication message
  *        was sent with a failure code.
  *
- * @param [in] vap  the VAP on which the message was sent
- * @param [in] mac_addr  the MAC address of the client to which the
- *                       message was sent
- * @param [in] rssi  the RSSI of the received authentication message which
- *                   caused the rejection
+ * @param [in] vap         The VAP on which the message was sent
+ * @param [in] mac_addr    The MAC address of the client to which the
+ *                         message was sent
+ * @param [in] rssi        The RSSI of the received authentication message
+ *                         which caused the rejection
+ * @param [in] bs_blocked  Band steering blocked the auth message
+ * @param [in] bs_rejected Band steering rejected the auth message
  */
 
 void ieee80211_bsteering_send_auth_fail_event(struct ieee80211vap *vap,
                                               const u_int8_t *mac_addr,
-                                              u_int8_t rssi)
+                                              u_int8_t rssi,
+                                              u_int32_t reason,
+                                              bool bs_blocked,
+                                              bool bs_rejected)
 {
     struct bs_auth_reject_ind auth;
 
@@ -1792,6 +1797,9 @@ void ieee80211_bsteering_send_auth_fail_
 
     OS_MEMCPY(auth.client_addr, mac_addr, IEEE80211_ADDR_LEN);
     auth.rssi = rssi;
+    auth.reason = reason;
+    auth.bs_blocked = bs_blocked;
+    auth.bs_rejected = bs_rejected;
     IEEE80211_DELIVER_BSTEERING_EVENT(vap,
                                       ATH_EVENT_BSTEERING_TX_AUTH_FAIL,
                                       sizeof(auth),
--- a/umac/include/ieee80211_band_steering.h
+++ b/umac/include/ieee80211_band_steering.h
@@ -166,16 +166,23 @@ bool ieee80211_bsteering_is_auth_blocked
 
 /**
  * @brief Generate an event indicating that an authentication message
- *        was sent with a failure code.
+ *        was blocked or rejected with a failure code.
  *
- * @param [in] vap  the VAP on which the message was sent
- * @param [in] mac_addr  the MAC address of the client to which the
- *                       message was sent
- * @param [in] rssi  the RSSI of the received authentication message which
- *                   caused the rejection
+ * @param [in] vap         The VAP on which the message was sent
+ * @param [in] mac_addr    The MAC address of the client to which the
+ *                         message was sent
+ * @param [in] rssi        The RSSI of the received authentication message
+ *                         which caused the rejection
+ * @param [in] bs_blocked  Band steering blocked the auth message
+ * @param [in] bs_rejected Band steering rejected the auth message
  */
-void ieee80211_bsteering_send_auth_fail_event(
-                                              struct ieee80211vap *vap, const u_int8_t *mac_addr, u_int8_t rssi);
+
+void ieee80211_bsteering_send_auth_fail_event(struct ieee80211vap *vap,
+                                              const u_int8_t *mac_addr,
+                                              u_int8_t rssi,
+                                              u_int32_t reason,
+                                              bool bs_blocked,
+                                              bool bs_rejected);
 
 /**
  * @brief Generate an event indicating that an authentication is
--- a/umac/mlme/ieee80211_mlme_ap.c
+++ b/umac/mlme/ieee80211_mlme_ap.c
@@ -764,6 +764,12 @@ int mlme_recv_auth_ap(struct ieee80211_n
         /* Ignore auth frame */
         IEEE80211_DPRINTF(vap, IEEE80211_MSG_ACL,
                               "[%s] auth: ignored by band steering\n",ether_sprintf(wh->i_addr2));
+        ieee80211_bsteering_send_auth_fail_event(vap,
+                                                 wh->i_addr2,
+                                                 rs->rs_rssi,
+                                                 0,
+                                                 bs_blocked,
+                                                 bs_rejected);
         return 0;
     }
 #else /* not ATH_BAND_STEERING */
@@ -947,7 +953,12 @@ int mlme_recv_auth_ap(struct ieee80211_n
 
 #if ATH_BAND_STEERING
     if (response_status != IEEE80211_STATUS_SUCCESS) {
-        ieee80211_bsteering_send_auth_fail_event(vap, wh->i_addr2, rs->rs_rssi);
+        ieee80211_bsteering_send_auth_fail_event(vap,
+                                                 wh->i_addr2,
+                                                 rs->rs_rssi,
+                                                 response_status,
+                                                 bs_blocked,
+                                                 bs_rejected);
     }
 #else
     // To silence compiler warning about unused variable.
